name: Increment Version and Update README

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - main

jobs:
  increment-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get-tag
        run: |
          # Get the latest tag, or default to 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: new-version
        run: |
          LATEST_TAG="${{ steps.get-tag.outputs.latest_tag }}"
          # Use patch as default for push events, otherwise use input
          VERSION_BUMP="${{ inputs.version_bump || 'patch' }}"
          
          # Remove 'v' prefix if it exists
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on input
          case $VERSION_BUMP in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update README
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          
          # Update the version in packages.yml example  
          sed -i "s/version: \[\".*\"\]/version: [\"$NEW_VERSION\"]/" README.md
          
          # Update the revision line in Git installation section
          sed -i "s/revision: .*/revision: $NEW_VERSION/" README.md
          
          echo "Updated README.md with version and revision: $NEW_VERSION"

      - name: Create and push new tag
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add and commit changes
          git add README.md
          git commit -m "Update README revision to $NEW_VERSION"
          
          # Create and push the new tag
          git tag "$NEW_VERSION"
          git push origin main
          git push origin "$NEW_VERSION"
          
          echo "Created and pushed tag: $NEW_VERSION"

      - name: Create GitHub Release
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get-tag.outputs.latest_tag }}"
          
          gh release create "$NEW_VERSION" \
            --title "Release $NEW_VERSION" \
            --notes "## What's Changed

          Automated release with version increment.

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: increment-version
    permissions:
      id-token: write  # Required for trusted publishing to PyPI

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
