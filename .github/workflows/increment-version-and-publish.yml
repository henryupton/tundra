name: Test, Increment Version, and Update README

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run tests
        run: |
          pytest tests/ --tb=short -v

  increment-version:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get-tag
        run: |
          # Get the latest tag, or default to 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: new-version
        run: |
          LATEST_TAG="${{ steps.get-tag.outputs.latest_tag }}"
          # Use patch as default for push events, otherwise use input
          VERSION_BUMP="${{ inputs.version_bump || 'patch' }}"
          
          # Remove 'v' prefix if it exists
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment based on input
          case $VERSION_BUMP in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update VERSION file and README
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"

          # Update VERSION file
          echo "$NEW_VERSION" > VERSION

          # Update README.md with new version
          sed -i "s/pip install tundra-cli==.*/pip install tundra-cli==$NEW_VERSION/" README.md

          echo "Updated VERSION to $NEW_VERSION and README.md"

      - name: Commit and push version changes
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit changes
          git add VERSION README.md
          git commit -m "Bump version to $NEW_VERSION" || echo "No changes to commit"

          # Push changes
          git push origin main

      - name: Create and push new tag
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"

          # Pull latest changes to ensure we're in sync
          git pull origin main

          # Create and push the new tag
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

          echo "Created and pushed tag: $NEW_VERSION"

      - name: Create GitHub Release
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get-tag.outputs.latest_tag }}"
          
          gh release create "$NEW_VERSION" \
            --title "Release $NEW_VERSION" \
            --notes "## What's Changed

          Automated release with version increment.

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: increment-version
    permissions:
      id-token: write  # Required for trusted publishing to PyPI

    steps:
      - name: Get latest tag
        id: get-latest-tag
        run: |
          LATEST_TAG=$(git ls-remote --tags origin | grep -o 'refs/tags/[^{}]*$' | sed 's|refs/tags/||' | sort -V | tail -n 1)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-latest-tag.outputs.latest_tag }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
